<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task type="function" name="mstransform" category="manipulation">
     <shortdescription>Split the MS, combine/separate/regrid spws and do channel and time averaging</shortdescription>

<description>
    
    The task mstransform can do the same functionalities available
    in cvel, partition, hanningsmooth and split without the need to read and write
    the output to disk multiple times. The main features of this task
    are:
    
    * take an input MS or Multi-MS (MMS)
    * ability to create an output MS or MMS
    * spw combination and separation
    * channel averaging taking flags and weights into account
    * time averaging taking flags and weights into account
    * reference frame transformation
    * Hanning smoothing
    
    All these transformations will be applied on the fly without any writing to
    disk to optimize I/O. The user can ask to create a Multi-MS in parallel using CASA's 
    cluster infrastructure using the parameter createmms. See MPIInterface 
    for more information on the cluster infrastructure.

    This task is implemented in a modular way to preserve the functionalities
    available in the replaced tasks. One can choose which functionality to apply
    or apply all of them by setting the corresponding parameters to True. Note 
    that there is an order in which the transformations are applied to the data that 
    makes logical sense on the point of view of the data analysis. 

    This task can create a multi-MS as the output. General selection
    parameters are included, and one or all of the various data columns
    (DATA, LAG_DATA and/or FLOAT_DATA, and possibly MODEL_DATA and/or
    CORRECTED_DATA) can be selected. It can also be used to create a normal
    MS, split-based on the given data selection parameters.

    The mstransform task creates a Multi-MS in parallel, using the CASA MPI framework.
    The user should start CASA as follows in order to run it in parallel.
    
    1) Start CASA on a single node with 8 engines. The first engine will be used as the
       MPIClient, where the user will see the CASA prompt. All other engines will be used
       as MPIServers and will process the data in parallel.
           mpicasa -n 8 casa --nogui --log2term
           mstransform(.....)
        
    2) Running on a group of nodes in a cluster.
           mpicasa -hostfile user_hostfile casa ....
           mstransform(.....)
            
        where user_hostfile contains the names of the nodes and the number of engines to use 
        in each one of them. Example:
            pc001234a, slots=5
            pc001234b, slots=4
     
    If CASA is started without mpicasa, it is still possible to create an MMS, but
    the processing will be done in sequential.
	
    The resulting WEIGHT_SPECTRUM produced by mstransform is in the statistical
    sense correct for the simple cases of channel average and time average, but not for
    the general re-gridding case, in which the error propagation formulas applicable for 
    WEIGHT_SPECTRUM are yet to be defined. Currently, as in cvel and in the imager,
    WEIGHT_SPECTRUM is transformed in the same way as the other data columns.
    Notice that this is not formally correct from the statistical point of view, 
    but is a good approximation at this stage.
        
    NOTE: the input/output in mstransform have a one-to-one relation.
          input MS  --  output MS
          input MMS --  output MMS
    
       unless the user sets the parameter createmms to True to create the following:
          input MS  --  output MMS

</description>

<input>

    <param type="string" name="vis" mustexist="true">
        <description>Name of input Measurement set or Multi-MS.</description>
        <value type="string"></value>
    </param>
    
    <!-- OUTPUT parameters -->    
    <param type="string" name="outputvis">
        <description>Name of output Measurement Set or Multi-MS.</description>
        <value></value>
    </param>
        <param type="bool" name="createmms">
            <description>Create a multi-MS output from an input MS.</description>
            <value>False</value>
        </param>
        <param type="string" name="separationaxis" ignorecase="true" subparam="true">
            <description>Axis to do parallelization across(scan,spw,auto,baseline).</description>
            <value>auto</value>
            <allowed kind="enum" ignorecase="true">
                <value>auto</value>
                <value>spw</value>
                <value>scan</value>
                <value>baseline</value>
            </allowed>
        </param>
        <param type="any" name="numsubms" subparam="true">
            <description>The number of Sub-MSs to create (auto or any number)</description>
        <any type="variant" limittypes="string int"/>
         <value type="string">auto</value>
        </param>
                
    <param type="intArray" name="tileshape">
        <description>List with 1 or 3 elements giving the tile shape of the disk data columns.</description>
        <value type="intArray">0</value>
    </param>

    <!-- SELECTION parameters -->    
    <param type="any" name="field">
        <description>Select field using ID(s) or name(s).</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>

    <param type="any" name="spw">
        <description>Select spectral window/channels.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>
    
    <param type="any" name="scan" >
        <description>Select data by scan numbers.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>

    <param type="any" name="antenna">
        <description>Select data based on antenna/baseline.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>
    
    <param type="any" name="correlation">
        <description>Correlation: '' ==> all, correlation="XX,YY".</description>
        <any type="variant" limittypes="string stringArray" />
        <value type="string" />
    </param>

    <param type="any" name="timerange" >
        <description>Select data by time range.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>
    
    <param type="any" name="intent" >
        <description>Select data by scan intent.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>
    
    <param type="any" name="array">
        <description>Select (sub)array(s) by array ID number.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>
    
    <param type="any" name="uvrange" >
        <description>Select data by baseline length.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>
    
    <param type="any" name="observation">
        <description>Select by observation ID(s).</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>

    <param type="any" name="feed">
        <description>Multi-feed numbers: Not yet implemented.</description>
        <any type="variant" limittypes="string stringArray int intArray"/>
        <value type="string"></value>
    </param>

    <param type="string" name="datacolumn" ignorecase="True">
        <description>Which data column(s) to process.</description>
        <value>corrected</value>
        <allowed kind="enum" ignorecase="True">
            <value>corrected</value>
            <value>data</value>
            <value>model</value>
            <value>data,model,corrected</value>
            <value>float_data</value>
            <value>lag_data</value>
            <value>float_data,data</value>
            <value>lag_data,data</value>
            <value>all</value>
        </allowed>
    </param>

        <param type="bool" name="realmodelcol" subparam="true">
            <description>Make real a virtual MODEL column.</description>
            <value>False</value>
        </param>

    <param type="bool" name="keepflags">
        <description>Keep *completely flagged rows* or drop them from the output.</description>
        <value>True</value>
    </param>
                
    <param type="bool" name="usewtspectrum">
        <description>Create a WEIGHT_SPECTRUM column in the output MS.</description>
        <value>False</value>
    </param>

    <!-- SPW COMBINATION parameters -->
    <param type="bool" name="combinespws">
        <description>Combine the input spws into a new output spw. Only supported when the number of channels is the same for all the spws.</description>
        <value>False</value>
    </param>
    
    <!-- CHANNEL AVERAGING parameters -->
    <param type="bool" name="chanaverage">
        <description>Average data in channels.</description>
        <value>False</value>
    </param>

        <param type="any" name="chanbin" subparam="true">
            <description>Width (bin) of input channels to average to form an output channel.</description>
            <any type="variant" limittypes="int intArray"/>            
            <value type="int">1</value>
        </param>


    <!-- HANNING SMOOTHING parameters -->
    <param type="bool" name="hanning">
        <description>Hanning smooth data to remove Gibbs ringing.</description>
        <value>False</value>
    </param>
   
    <!-- REGRID MS parameters -->
    <param type="bool" name="regridms">
        <description>Transform channel labels and visibilities to a different spectral reference frame. Notice that u,v,w data is not transformed. </description>
        <value>False</value>
    </param>

        <param type="string" name="mode" subparam="true">
            <description>Regridding mode (channel/velocity/frequency/channel_b).</description>
            <value>channel</value>
            <allowed kind="enum">
            <value>channel</value>
            <value>velocity</value>
            <value>frequency</value>
            <value>channel_b</value>
            </allowed>
        </param>

        <param type="int" name="nchan" subparam="true">
            <description>Number of channels in the output spw (-1=all).</description>
            <value>-1</value>
        </param>

        <param type="any" name="start" subparam="true">
            <description>First channel to use in the output spw (mode-dependant)</description>
            <any type="variant"/>
            <value type="int">0</value>
        </param>

        <param type="any" name="width" subparam="true">
            <description>Number of input channels that are used to create an output channel.</description>
            <any type="variant"/>
            <value type="int">1</value>
        </param>

        <param type="int" name="nspw" subparam="true">
            <description>Number of output spws to create in output MS.</description>
            <value type="int">1</value>
        </param>

        <param type="string" name="interpolation" subparam="true" ignorecase="True">
            <description>Spectral interpolation method.</description>
            <value>linear</value>
            <allowed kind="enum">
               <value>nearest</value>
               <value>linear</value>
               <value>cubic</value>
               <value>spline</value>
               <value>fftshift</value>
            </allowed>
        </param>

        <param type="any" name="phasecenter" subparam="true">
            <description>Phase center direction to be used for the spectral coordinate transformation: position or field index</description>
            <any type="variant"/>
            <value type="string"></value>
        </param>

        <param type="string" name="restfreq" subparam="true">
            <description>Rest frequency to use for output.</description>
            <value></value>
        </param>
    
        <param type="string" name="outframe" subparam="true" ignorecase="True">
            <description>Output reference frame (''=keep input frame).</description>
            <value></value>
            <allowed kind="enum">
            <value>topo</value>
            <value>geo</value>
            <value>lsrk</value>
            <value>lsrd</value>
            <value>bary</value>
            <value>galacto</value>
            <value>lgroup</value>
            <value>cmb</value>
            <value>source</value>            
            <value></value>
            </allowed>
        </param>

        <param type="string" name="veltype" subparam="true" ignorecase="True">
            <description>Velocity definition.</description>
            <value>radio</value>
            <allowed kind="enum">
               <value>optical</value>
               <value>radio</value>
            </allowed>
        </param>

	<param type="bool" name="preaverage">
          <description>Pre-average channels before regridding when the ratio.</description>
          <value>False</value>
	</param>

    <!-- TIME AVERAGING parameters -->
    <param type="bool" name="timeaverage">
        <description>Average data in time.</description>
        <value>False</value>
    </param>
    
        <param type="string" name="timebin" subparam="true">
            <description>Bin width for time averaging.</description>     
            <value type="string">0s</value>
        </param>
    
        <param type="any" name="timespan" subparam="true">
            <description>Span the timebin across scan, state or both.</description>
            <any type="variant" limittypes="string stringArray"/>
            <value type="string"></value>
        </param>

        <param type="double" name="maxuvwdistance" subparam="true">
            <description>Maximum separation of start-to-end baselines that can be included in an average. (meters)</description>
            <value type="double">0.0</value>
        </param>
        
        <!-- OTF CALIBRATION parameters -->
        
	    <param type="bool" name="docallib" >
	        <description>Enable on-the-fly (OTF) calibration as in task applycal</description>
	        <value>False</value>
	    </param>

	    <param type="string" name="callib" subparam="true" >
	        <description>Path to calibration library file</description>
	        <value type="string"></value>
	    </param>       
	    
        <!-- UVContSub parameters -->
        
	    <param type="bool" name="douvcontsub" >
	        <description>Enable continuum subtraction as in task uvcontsub</description>
	        <value>False</value>
	    </param>

	    <param type="string" name="fitspw" subparam="true" >
	        <description>Spectral window:channel selection for fitting the continuum</description>
	        <value type="string"></value>
	    </param>       	    
	    
		<param type="int" name="fitorder" subparam="true">
			<description>Polynomial order for the fits</description>
			<value type="int">0</value>
		</param>
		
		<param type="bool" name="want_cont" subparam="true">
			<description>Produce continuum estimate instead of continuum subtracted data</description>
			<value>False</value>
		</param>
		
		<param type="bool" name="denoising_lib" subparam="true">
			<description>Use new denoising library (based on GSL) instead of casacore fitting routines</description>
			<value>True</value>
		</param>	
		
		<param type="int" name="nthreads" subparam="true">
			<description>Number of OMP threads to use (currently maximum limited by number of polarizations)</description>
			<value>1</value>
		</param>			
		
		<param type="int" name="niter" subparam="true">
			<description>Number of iterations for re-weighted linear fit</description>
			<value>1</value>
		</param>			

        <!-- HIDDEN PARAMETERS, UNRELATED to TIME AVERAGING -->
        <param type="bool" name="disableparallel" subparam="true" visibility="hidden">
            <description>Hidden parameter for internal use only. Do not change it!</description>
            <value>False</value>
        </param>        
        <param type="int" name="ddistart" subparam="true" visibility="hidden">
            <description>Hidden parameter for internal use only. Do not change it!</description>
            <value>-1</value>
        </param>
        <param type="string" name="taql" subparam="true" visibility="hidden">
            <description>Table query for nested selections</description>
            <value type="string"></value>
        </param>             
        <param type="bool" name="monolithic_processing" subparam="true" visibility="hidden">
            <description>Hidden parameter for internal use only. Do not change it!</description>
            <value>False</value>
        </param>
        <param type="bool" name="reindex" subparam="true" visibility="hidden">
            <description>Hidden parameter for use in the pipeline context only</description>
            <value>True</value>
        </param>        
                        
    <constraints>
          <when param="createmms">
            <equals type="bool" value="False"/>
            <equals type="bool" value="True">
                  <default param="separationaxis"><value type="string">auto</value></default>
                  <default param="numsubms"><value type="string">auto</value></default>
            </equals>
          </when>
          <when param="datacolumn">
            <equals type="string" value="corrected"></equals>
            <equals type="string" value="model">
             	  <default param="realmodelcol"><value type="bool">False</value></default>           
            </equals>         
            <equals type="string" value="all">
             	  <default param="realmodelcol"><value type="bool">False</value></default>           
            </equals>         
            <equals type="string" value="data,model,corrected">
             	  <default param="realmodelcol"><value type="bool">False</value></default>           
            </equals>         
          </when>
          <when param="chanaverage">
            <equals type="bool" value="False"/>
            <equals type="bool" value="True">
                  <default param="chanbin"><value type="int">1</value></default>
            </equals>
          </when>
        <when param="regridms">
            <equals type="bool" value="False"/>
            <equals type="bool" value="True">
                <default param="mode"><value type="string">channel</value></default>
                <default param="nchan"><value type="int">-1</value></default>
                <default param="start"><value type="int">0</value></default>
                <default param="width"><value type="int">1</value></default>
                <default param="nspw"><value type="int">1</value></default>
                <default param="interpolation"><value type="string">linear</value></default>
                <default param="phasecenter"><value type="string"></value></default>
                <default param="restfreq"><value type="string"></value></default>
                <default param="outframe"><value type="string"></value></default>
                <default param="veltype"><value type="string">radio</value></default>
                <default param="preaverage"><value type="bool">False</value></default>
            </equals>
          </when>
        <when param="timeaverage">
            <equals type="bool" value="False"/>
            <equals type="bool" value="True">
                  <default param="timebin"><value type="string">0s</value></default>
                  <default param="timespan"><value type="string"></value></default>
                  <default param="maxuvwdistance"><value type="double">0.0</value></default>
            </equals>
          </when>
        <when param="docallib">
            <equals type="bool" value="False"/>
            <equals type="bool" value="True">
                  <default param="callib"><value type="string"></value></default>
            </equals>
          </when> 
        <when param="douvcontsub">
            <equals type="bool" value="False"/>
            <equals type="bool" value="True">
                  <default param="fitspw"><value type="string"></value></default>
                  <default param="fitorder"><value type="int">0</value></default>
                  <default param="want_cont"><value type="bool">False</value></default>
                  <default param="denoising_lib"><value type="bool">True</value></default>   
                  <default param="nthreads"><value type="int">1</value></default>                     
                  <default param="niter"><value type="int">1</value></default>          
            </equals>
        </when>      
    </constraints>

</input>
<example>  

    Detailed description of keyword arguments:

--- Input/Output parameters ---
    vis -- Name of input visibility file
        default: ''; example: vis='ngc5921.ms'

    outputvis -- Name of output visibility file or Multi-MS
        default: ''; example: outputvis='ngc5921.mms'

    createmms -- Create an output Multi-MS from an input MS.
        default: False

        This parameter only has effect if set to True, when it will try
        to create an output Multi-MS from an input MS. The one-to-one
        relation of input/output in mstransform is:
          input MS  --  output MS
          input MMS --  output MMS
    
        by setting createmms=True, the following is possible:
          input MS  --  output MMS
            
        NOTE: See information on processing input Multi-MS at the end of this help section.        

        separationaxis -- Axis to do parallelization across. 
            default: 'auto'
            options: 'scan', 'spw', 'auto', 'baseline'

            * The 'auto' option will partition per scan/spw to obtain optimal load balancing with the
             following criteria:
    
            1 - Maximize the scan/spw/field distribution across sub-MSs
            2 - Generate sub-MSs with similar size

            * The 'scan' or 'spw' axes will partition the MS into scan or spw. The individual sub-MSs may
            not be balanced with respect to the number of rows.

            * The 'baseline' axis is mostly useful for Single-Dish data. This axis will partition the MS
              based on the available baselines. If the user wants only auto-correlations, use the
              antenna selection such as antenna='*&amp;&amp;&amp;' together with this separation axis. Note that in
              if numsubms='auto', partition will try to create as many subMSs as the number of available
              servers in the cluster. If the user wants to have one subMS for each baseline, set the numsubms
              parameter to a number higher than the number of baselines to achieve this.        
               
        numsubms -- The number of sub-MSs to create.
            default: 'auto'
            Options: any integer number (example: numsubms=4)
    
               The default 'auto' is to partition using the number of available servers in the cluster.
               If the task is unable to determine the number of running servers, or the user did not start CASA
               using mpicasa, numsubms will use 8 as the default.
                
    tileshape -- List with 1 or 3 elements describing the tile shape that will be used
                 to save the columns to disk. (list)
        default: [0]
        options: [0] or [1] or [int,int,int]. When list has only one element, it should
                 be either 0 or 1. When the list has three elements, they should be the
                 number of correlations, channels, rows.


--- Data selection parameters ---
    field -- Select field using field id(s) or field name(s).
             [run listobs to obtain the list iof d's or names]
        default: ''=all fields If field string is a non-negative
           integer, it is assumed to be a field index
           otherwise, it is assumed to be a field name
           field='0~2'; field ids 0,1,2
           field='0,4,5~7'; field ids 0,4,5,6,7
           field='3C286,3C295'; fields named 3C286 and 3C295
           field = '3,4C*'; field id 3, all names starting with 4C

    spw -- Select spectral window/channels
        default: ''=all spectral windows and channels
           spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
           spw='&lt;2';  spectral windows less than 2 (i.e. 0,1)
           spw='0:5~61'; spw 0, channels 5 to 61
           spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45.
           spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each.
           spw = '*:3~64'  channels 3 through 64 for all sp id's
                   spw = ' :3~64' will NOT work.

               NOTE: mstransform does not support multiple channel ranges per
                     spectral window (';').

    scan -- Scan number range
        default: ''=all

    antenna -- Select data based on antenna/baseline
        default: '' (all)
            Non-negative integers are assumed to be antenna indices, and
            anything else is taken as an antenna name.

        examples:
            antenna='5&amp;6': baseline between antenna index 5 and index 6.
            antenna='VA05&amp;VA06': baseline between VLA antenna 5 and 6.
            antenna='5&amp;6;7&amp;8': baselines 5-6 and 7-8
            antenna='5': all baselines with antenna 5
            antenna='5,6,10': all baselines including antennas 5, 6, or 10
            antenna='5,6,10&amp;': all baselines with *only* antennas 5, 6, or
                                   10.  (cross-correlations only.  Use &amp;&amp;
                                   to include autocorrelations, and &amp;&amp;&amp;
                                   to get only autocorrelations.)
            antenna='!ea03,ea12,ea17': all baselines except those that
                                       include EVLA antennas ea03, ea12, or
                                       ea17.

    correlation -- Correlation types or expression.
        default: '' (all correlations)
        example: correlation='XX,YY' 

    timerange -- Select data based on time range:
        default: '' (all); examples,
           timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
           Note: if YYYY/MM/DD is missing date, timerange defaults to the
           first day in the dataset
           timerange='09:14:0~09:54:0' picks 40 min on first day
           timerange='25:00:00~27:30:00' picks 1 hr to 3 hr 30min
           on next day
           timerange='09:44:00' data within one integration of time
           timerange='&gt;10:24:00' data after this time

    array -- (Sub)array number range
        default: ''=all

    uvrange -- Select data within uvrange (default units meters)
        default: ''=all; example:
            uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda
            uvrange='&gt;4klambda';uvranges greater than 4 kilo-lambda
            uvrange='0~1000km'; uvrange in kilometers

    observation -- Select by observation ID(s)
        default: ''=all

    feed -- Selection based on the feed - NOT IMPLEMENTED YET
        default: ''=all


    datacolumn -- Which data column to use for processing (case-insensitive).
        default: 'corrected'; example: datacolumn='data'
        options: 'data', 'model', 'corrected', 'all','float_data', 'lag_data', 
                 'float_data,data', 'lag_data,data'.

            NOTE: 'all' = whichever of the above that are present. If the requested
                          column does not exist, the task will exit with an error.

            When datacolumn is set to either one of the values 'model','all',
            'data,model,corrected', a sub-parameter realmodelcol will be enabled.
            See description below.

        realmodelcol -- Make real a virtual MODEL column. If set to True, a real MODEL_DATA 
                        column will be added to the output MS based on the existing SOURCE_MODEL
                        column.
            default: False

	
    keepflags -- Keep completely flagged rows in the output or drop them. This has no
                 effect on partially flagged rows. All of the channels and correlations
                 of a row must be flagged for it to be droppable, and a row must be
                 well defined to be keepable. 
    
            IMPORTANT: Regardless of this parameter, flagged data is never included in
                       channel averaging. On the other hand, partially flagged rows will
                       always be included in time averaging. The average value of the
                       flagged data for averages containing ONLY flagged data in the relevant
                       output channel will be written to the output with the corresponding
                       flag set to True, while only unflagged data is used on averages where
                       there is some unflagged data with the flag set to False.
       
        default: True (keep completely flagged rows in the output)
		
	
    usewtspectrum -- Create a WEIGHT_SPECTRUM column in the output MS. When set to True,
                     a WEIGHT_SPECTRUM column will be created using the input WEIGHT column,
                     such that each channel in the WEIGHT_SPECTRUM will get WEIGHT/nChannels.
        default: False

	
--- SPW combination parameters ---
    combinespws -- Combine the input spws into a new output spw.
        default: False

            NOTE: This option is only supported when the number of channels is the same for
                  all the spws. Using this option with different numbers of channels for
                  different spws will result in an error.

            NOTE: If the SPWs have different polarization settings only the common
                  polarizations will be output. For instance, if SPW 1 has XX XY YX YY and
                  SPW 2 has XX YY, the output MS will have a single SPW with XX YY polarizations

            NOTE: Whenever the data to be combined has different EXPOSURE values 
                  in the spectral windows, mstransform will use the WEIGHT_SPECTRUM 
                  for the combination. If WEIGHT_SPECTRUM is not available, it will 
                  use the values from the WEIGHT column. Each output channel is calculated 
                  using the following equation:

          outputChannel_j = SUM(inputChannel_i*contributionFraction_i*inputWeightSpectrum_i) 
                           ------------------------------------------------------------------
                                 SUM(contributionFraction_i*inputWeightSpectrum_i)

	
--- Channel averaging parameters ---
    chanaverage -- Average data across channels. Partially flagged data is not be included in the average
                   unless all data contributing to a given output channel is flagged. In this case, 
                   mstransform calculates the average of all flagged data, and writes it to the output MS
                   with the corresponding flag set to true. If present, WEIGHT_SPECTRUM/SIGMA_SPECTRUM
                   are used together with the channelized flags (FLAG), to compute a weighted average 
                   (using WEIGHT_SPECTRUM for CORRECTED_DATA and SIGMA_SPECTRUM for DATA).    
        default: False

        chanbin -- Bin width for channel average in number of input channels.
                   If a list is given, each bin applies to one of the selected SPWs.
                   
            default: 1 =&gt; no channel averaging.
            options: (int) or [int]
            example: chanbin=[2,3] =&gt; average 2 channels of 1st selected
		             spectral window and 3 in the second one.
    
            NOTE: WEIGHT_SPECTRUM/SIGMA_SPECTRUM will be used (if present) in
                  addition to the flags to compute a weighted average. The calculations
                  is done as follows:
    
             1) When WEIGHT_SPECTRUM/SIGMA_SPECTRUM are not present:
                    Avg = SUM(Chan_i*Flag_i)/SUM(Flag_i) 
    
             2) When WEIGHT_SPECTRUM/SIGMA_SPECTRUM are present:
                    Avg = SUM(Chan_i*Flag_i*WeightSpectrum_i)/SUM(Flag_i*WeightSpectrum_i)

           If combinespws=True, then chanbin can only be a (int). This is because the
           channel average then refers to the already combined MS after spw combination,
           which has a single spw.


--- Hanning smoothing parameters --- 
    hanning -- Hanning smooth frequency channel data to remove Gibbs ringing.
        default: False

--- Regrid parameters ---
    regridms -- Transform channel labels and visibilities to a different spectral reference frame. 
                Notice that u,v,w data is not transformed. 
        default: False

        mode -- Regridding mode.
            default: 'channel'; produces equidistant grid based on first selected channel.
            options: 'velocity', 'frequency', 'channel_b'.

            When set to velocity or frequency, it means that the channels must be specified
            in the respective units. When set to channel_b it means an alternative 'channel' 
            mode that does not force an equidistant grid. It is faster.

        nchan -- Number of channels in the output spw (int).
            default: -1

        start -- First channel to use in the output spw (depends on the mode)
            default: 0 --> when mode='channel'

            When mode='channel', 'start' means the first channel in the input spw
            to use when creating the output spw. When mode='frequency',
            'start' means the lowest frequency of the output spw. If this information
            is not available, leave it blank and mstransform will calculate it.

        width -- Width of input channels that are used to create an output channel. 
            default: 1

            Note that mstransform will only shift spws with channel widths of the same 
            sign in a single operation. If you are regridding spws with mixed positive 
            and negative channel widths, you should run this task separated for each 
            group of spws. You can verify the channel widths for your MS using 
            listobs for example, and looking at the SPW table, column ChanWid.
            
        nspw -- Number of output spws to create in the output MS/MMS (int). 
            default: 1  --> it means, do not separate the spws.

            One can regrid the MS or not and further separate the
            output into a given number of spws. Internally, the framework
            will combine the selected spws before separating them so that
            channel gaps and overlaps are taken into account. This parameter
            will create a regular grid of spws in the output MS. If nchan
            is set, it will refer to the number of output channels in each
            of the separated spws.

        interpolation -- Spectral interpolation method.
            default: 'linear'
            options: 'nearest', 'cubic', 'spline', 'fftshift'

        phasecenter -- Direction measure  or fieldid. To be used in mosaics to indicate
               the center direction to be used in the spectral coordinate transformation.
            default: '' (first selected field)
            options: FIELD_ID (int) or center coordinate measure (str).
            example: phasecenter=6 or phasecenter='J2000 19h30m00 -40d00m00'

        restfreq -- Specify rest frequency to use for output.
            default: ''; occasionally it is necessary to set this.
            example1 for some VLA spectral line data.
            example2 for NH_3 (1,1) put restfreq='23.694496GHz'.

        outframe -- Output reference frame (case-insensitive).
            default: ''; it will keep the input reference frame.
            options: 'LSRK', 'LSRD', 'BARY', 'GALACTO', 'LGROUP', 'CMB', 'GEO', 'TOPO'.

        veltype -- Definition of velocity (as used in mode).
            default: 'radio'

        preaverage -- Pre-average channels before regridding. This is done when the ratio
                      between the output and and input widths is greater than 2. This has
                      been disabled since CASA 5.0
            default: False


--- Time averaging parameters ---
    timeaverage -- Average data across time. Partially flagged data is not be included in the average
                   unless all data contributing to a given output channel is flagged. In this case, 
                   mstransform calculates the average of all flagged data, and writes it to the output MS
                   with the corresponding flag set to true. If keepflags=False, the fully flagged data
                   is not be written to the output MS. If present, WEIGHT_SPECTRUM/SIGMA_SPECTRUM
                   are used together with the channelized flags (FLAG), to compute a weighted average 
                   (using WEIGHT_SPECTRUM for CORRECTED_DATA and SIGMA_SPECTRUM for DATA). Otherwise 
                   WEIGHT/SIGMA are used instead to average together data from different integrations.    

        default: False

        timebin -- Bin width for time average in seconds.
            default: '0s'

        timespan -- Let the timebin span across scan, state or both.
                    State is equivalent to sub-scans. One scan may have several
                    state ids. For ALMA MSs, the sub-scans are limited to about
                    30s duration each. In these cases, the task will automatically
                    add state to the timespan parameter. To see the number of states
                    in an MS, use the msmd tool. See help msmd.

            default: '' (separate time bins by both of the above)
            options: 'scan', 'state', 'state,scan'

            examples: 
            timespan = 'scan'; can be useful when the scan number
                       goes up with each integration as in many WSRT MSs.
            timespan = ['scan', 'state']: disregard scan and state
                       numbers when time averaging.
            timespan = 'state,scan'; same as above.

        maxuvwdistance -- Provide a maximum separation of start-to-end baselines 
                          that can be included in an average. (int)
            default: 0.0 (given in meters)
            
            
--- On-the-fly calibration parameters ---            
    docallib -- Enable on-the-fly (OTF) calibration as in task applycal
        default: False
        
        callib -- Path to calibration library file, which is a ascii file containing
                  the parameters to correct the data as task in task applycal, namely
                  gaintable/gainfield/interp/spwmap/calwt. In a Cal Library file, each 
                  row expresses the calibration apply instructions for a particular 
                  caltable and (optionally) a specific selection of data in the MS to 
                  which it is to be applied.
                  
            default: '' (there is no default callib file)    
            
            examples: 
            
            caltable='cal.G' tinterp='linear' calwt=True
            
            -> Arrange a caltable called cal.G to be applied (with no detailed selection) 
            to all MS data with linear interpolation in time, and with the weights also 
            calibrated.
            
            caltable='cal.G' tinterp='linear' fldmap='nearest' spwmap=[0,1,1,3] calwt=True
            caltable='cal.B' finterp='linear' fldmap='3' spwmap=[0,0,0,0] calwt=False    
            
            -> In this case, solutions from cal.G will be selected based on directional 
            proximity ('nearest') for each MS field via the fldmap parameter, and spw 2 
            will be calibrated by spw 1 solutions. For cal.B, solutions from field id 3 
            will be used exclusively, with spw 0 calibrating all MS spws.
            


        
    ------ Multi-MS Processing and Heuristics ---------
    
    ** Input Multi-MS (MMS) **

    Task mstransform will process an input MMS in parallel whenever possible. Each sub-MS of
    the MMS will be processed in a separate engine and the results will be post-processed at the
    end to create an output MMS. The output MMS will have the same separationaxis of the input
    MMS, which will be written to the table.info file inside the MMS directory.

    Naturally, some transformations available in mstransform require more care when the user
    first partition the MS. If one wants to do a combination of spws by setting the parameter
    combinespws = True in mstransform, the input MMS needs to contain all the
    selected spws in each of the sub-MSs or the processing will fail. For this, one may set the initial
    separationaxis to scan or use the default auto with a proper numsubms set so that each sub- MS in 
    the MMS is self-contained with all the necessary spws for the combination.

    The task will check if the sub-MSs contain all the selected spws when combinespws=True
    and if not, it will issue a warning and process the input MMS as a monolithic MS. In this
    case, the separation axis of the output MMS will be set to scan, regardless of what the input
    axis was. 

    A similar case happens when the separation axis of the input MMS is per scan and the user
    asks to do time averaging with time spanning across scans. If the individual sub-MSs are not
    self-contained of the necessary scans and the duration of the scans is shorter than the given
    timebin, the spanning will not be possible. In this case, the task will process the input MMS as
    a monolithic MS and will set the axis of the output MMS to spw. 

    It is important that the user sets the separation axis correctly when first partitioning the MS.
    See the table below for when it is possible to process the input MMS in parallel or not, using
    mstransform.
        
    input MMS axis   combinespws=True   nspw > 1   timeaverage=True, timespan='scan'
    -------------------------------------------------------------------------------
    scan                  YES            YES             NO        
    spw                   NO             NO              YES     
    auto                  MAYBE          MAYBE           MAYBE             
                
    
------ EXAMPLES ------
	
More documentation on mstransform can be found here:
http://www.eso.org/~scastro/ALMA/casa/MST/MSTransformDocs/MSTransformDocs.html

1) Split out a single channel.
    mstransform(vis='ctb80-vsm.ms', outputvis='mychn.ms', datacolumn='data', spw='0:25')

2) Only combine the selected spws into a single output spw.
    mstransform(vis='Four_ants.ms', outputvis='myspw.ms', combinespws=True, spw='0~3')

3) Combine two spws and regrid one field, using two input channels to make one output.
    mstransform(vis='jupiter6cm.demo.ms',outputvis='test1.ms',datacolumn='DATA',field='11',
                spw='0,1', combinespws=True, regridms=True, nchan=1, width=2)

4) Combine 24 spws and regrid in frequency mode to create 21 output channels. Change the 
   phase center.
    mstransform(vis='g19_d2usb_targets_line.ms', outputvis='test2.ms', datacolumn='DATA',
                combinespws=True, regridms=True, mode='frequency', nchan=21, start='229587.0MHz',
                width='1600kHz', phasecenter="J2000 18h25m56.09 -12d04m28.20")

5) Only apply Hanning smoothing to MS.
    mstransform(vis='g19_d2usb_targets_line.ms', outputvis='test3.ms', datacolumn='DATA',
                hanning=True)
 
6) Change the reference frame and apply Hanning smoothing after combining all spws.
    mstransform(vis='g19_d2usb_targets_line.ms', outputvis='test4.ms', datacolumn='DATA',
                combinespws=True, regridms=True, mode="channel", outframe="BARY",
                phasecenter="J2000 18h25m56.09 -12d04m28.20", hanning = True)

7) Apply time averaging using a bin of 30 seconds on the default CORRECTED column.
    mstransform(vis='g19_d2usb_targets_line.ms', outputvis='test5.ms', timeaverage=True,
                timebin='30s')
                
8) Apply OTF calibration to ng5921 using a calibration library
    mstransform(vis='ngc5921.ms', outputvis='ngc5921_calibrated.ms',docallib=True,
    			callib='unittest/mstransform/ngc5921_regression/ngc5921_callib.txt')                


</example> 
</task>
</casaxml>
